version: "1.0"

sensors:
  # Test word-based operators (Python syntax)
  test_word_or:
    name: "Word OR Test"
    formula: "door_open or window_open"
    variables:
      door_open: "binary_sensor.door_open"
      window_open: "binary_sensor.window_open"
    metadata:
      unit_of_measurement: "boolean"

  test_word_and:
    name: "Word AND Test"
    formula: "alarm_set and not window_open"
    variables:
      alarm_set: "binary_sensor.alarm_set"
      window_open: "binary_sensor.window_open"
    metadata:
      unit_of_measurement: "boolean"

  # Test mixed boolean and comparison
  test_mixed_logic:
    name: "Mixed Logic Test"
    formula: "(temp > 75) and alarm_set"
    variables:
      temp: "sensor.temperature"
      alarm_set: "binary_sensor.alarm_set"
    metadata:
      unit_of_measurement: "boolean"

  # Test complex boolean with multiple conditions
  test_complex_boolean:
    name: "Complex Boolean Test"
    formula: "(door_open or window_open) and alarm_set and not (temp > 80)"
    variables:
      door_open: "binary_sensor.door_open"
      window_open: "binary_sensor.window_open"
      alarm_set: "binary_sensor.alarm_set"
      temp: "sensor.temperature"
    metadata:
      unit_of_measurement: "boolean"

  # Test precedence with parentheses
  test_precedence:
    name: "Boolean Precedence Test"
    formula: "door_open and (window_open or alarm_set)"
    variables:
      door_open: "binary_sensor.door_open"
      window_open: "binary_sensor.window_open"
      alarm_set: "binary_sensor.alarm_set"
    metadata:
      unit_of_measurement: "boolean"

  # Test conditional expressions with boolean logic
  test_conditional_boolean:
    name: "Conditional Boolean Test"
    formula: "'Secure' if not (door_open or window_open) else 'Unsecure'"
    variables:
      door_open: "binary_sensor.door_open"
      window_open: "binary_sensor.window_open"
    metadata:
      unit_of_measurement: "text"

  # Test boolean operations with string functions
  test_boolean_with_strings:
    name: "Boolean with String Operations"
    formula: "contains(device_name, 'sensor') and startswith(device_name, 'temp')"
    variables:
      device_name: "sensor.temperature_sensor"
    metadata:
      unit_of_measurement: "boolean"

  # Test HA-style boolean state preprocessing
  test_ha_style_booleans:
    name: "HA Style Boolean Test"
    formula: "door_sensor and not window_sensor"
    variables:
      door_sensor: "binary_sensor.door_open"     # Will have 'on'/'off' states
      window_sensor: "binary_sensor.window_open" # Will have 'on'/'off' states
    metadata:
      unit_of_measurement: "boolean"
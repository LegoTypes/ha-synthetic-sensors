# The test for this fixture is tests/integration/test_attribute_variables_exa
version: "1.0"

# Comprehensive example showing attribute variables and their capabilities
# This demonstrates how attributes can have their own variables section
# Used by: tests/integration/test_attribute_variables_example_integration.py

global_settings:
  device_identifier: "test_device_attribute_variables"
  device_name: "Main Solar Inverter"
  device_manufacturer: "SolarTech"
  device_model: "ST-5000"

sensors:
  # Example 1: Basic attribute variables
  energy_monitor:
    name: "Energy Monitor"
    formula: "grid_power + solar_power"
    variables:
      grid_power: sensor.grid_meter_power
      solar_power: sensor.solar_inverter_power
    attributes:
      # Attribute inherits grid_power and solar_power from parent
      power_balance:
        formula: "grid_power - solar_power"
        metadata:
          unit_of_measurement: "W"

      # Attribute defines its own variables
      battery_status:
        formula: "battery_level * battery_capacity / 100"
        variables:
          battery_level: sensor.battery_percentage
          battery_capacity: sensor.battery_total_capacity
        metadata:
          unit_of_measurement: "kWh"

      # Attribute uses mix of inherited and own variables
      efficiency_analysis:
        formula: "solar_power / (solar_power + grid_power) * panel_efficiency"
        variables:
          panel_efficiency: sensor.solar_panel_efficiency
        metadata:
          unit_of_measurement: "%"

      # Literal attributes - static device information
      voltage: 240
      manufacturer: "EnergyCorp"
      model: "EM-2000"
      installation_date: "2024-01-15"
      warranty_years: 5
      is_active: True
    metadata:
      unit_of_measurement: "W"
      device_class: "power"
      state_class: "measurement"

  # Example 2: Variable precedence - attribute variables override sensor variables
  temperature_analysis:
    name: "Temperature Analysis"
    formula: "indoor_temp + outdoor_temp"
    variables:
      indoor_temp: sensor.living_room_temperature
      outdoor_temp: sensor.outdoor_temperature
      humidity: sensor.living_room_humidity
    attributes:
      # Uses sensor-level variables
      average_temp:
        formula: "(indoor_temp + outdoor_temp) / 2"
        metadata:
          unit_of_measurement: "°C"

      # Overrides sensor-level outdoor_temp with different entity
      temperature_difference:
        formula: "indoor_temp - weather_station_temp"  # Use different variable name to avoid conflict
        variables:
          weather_station_temp: sensor.weather_station_temperature  # Different entity than sensor level
        metadata:
          unit_of_measurement: "°C"

      # Uses attribute-specific variables only
      comfort_index:
        formula: "'Comfortable' if comfort_temp > 20 and comfort_humidity < 60 else 'Uncomfortable'"
        variables:
          comfort_temp: sensor.bedroom_temperature
          comfort_humidity: sensor.bedroom_humidity
        metadata:
          unit_of_measurement: ""

      # Literal attributes - sensor configuration
      sensor_type: "temperature"
      location: "Living Room"
      calibration_offset: 0.5
      last_calibration: "2024-03-01"
      requires_maintenance: False
    metadata:
      unit_of_measurement: "°C"
      device_class: "temperature"
      state_class: "measurement"

  # Example 3: Complex attribute variables with collections and calculations
  home_automation_hub:
    name: "Home Automation Hub"
    formula: "total_devices"
    variables:
      total_devices: sensor.total_smart_devices
    attributes:
      # Collection variables in attributes
      security_status:
        formula: "security_devices - untriggered_security_devices"
        metadata:
          unit_of_measurement: "active"
        variables:
          security_devices:
            formula: "count(device_class:door|device_class:window|device_class:motion)"
          untriggered_security_devices:
            formula: "count(device_class:door|window|motion !state:unavailable|unknown|off)"

      # Numeric literals in attribute variables
      energy_cost_projection:
        formula: "current_usage * rate_per_kwh * hours_per_day * days_per_month"
        variables:
          current_usage: sensor.current_power_usage
          rate_per_kwh: 0.12  # Literal: cost per kWh
          hours_per_day: 24   # Literal: hours
          days_per_month: 30  # Literal: days
        metadata:
          unit_of_measurement: "$"

      # Simple pattern variables in attributes
      circuit_analysis:
        formula: "circuit_power_1 + circuit_power_2"
        variables:
          circuit_power_1: sensor.circuit_1_power
          circuit_power_2: sensor.circuit_2_power
        metadata:
          unit_of_measurement: "W"

      # State and attribute filtering
      low_battery_alert:
        formula: "battery_sensor_1 + battery_sensor_2"
        variables:
          battery_sensor_1: sensor.battery_1_level
          battery_sensor_2: sensor.battery_2_level
        metadata:
          unit_of_measurement: "devices"

      # Literal attributes - hub configuration
      hub_version: "2.1.0"
      max_devices: 100
      protocol: "Zigbee"
      firmware_date: "2024-02-15"
      auto_update: True
    metadata:
      unit_of_measurement: "count"
      state_class: "measurement"

  # Example 4: Attribute variables with device association
  solar_inverter_analysis:
    name: "Solar Inverter Analysis"
    formula: "inverter_power"
    variables:
      inverter_power: sensor.solar_inverter_power
    attributes:
      # Weather correlation analysis
      weather_efficiency:
        formula: "inverter_power / (irradiance * panel_area) * 100"
        variables:
          irradiance: sensor.solar_irradiance
          panel_area: 50  # Literal: square meters of panels
        metadata:
          unit_of_measurement: "%"

      # Temperature impact on efficiency
      temp_efficiency:
        formula: "100 - (panel_temp - optimal_temp) * temp_coeff if panel_temp > optimal_temp else 100"
        variables:
          panel_temp: sensor.solar_panel_temperature
          optimal_temp: 25    # Literal: optimal temperature in Celsius
          temp_coeff: 0.4     # Literal: efficiency loss per degree
        metadata:
          unit_of_measurement: "%"

      # Maintenance scheduling
      maintenance_due:
        formula: "'Due' if days_since_maintenance > maintenance_interval else 'OK'"
        variables:
          days_since_maintenance: sensor.days_since_solar_maintenance
          maintenance_interval: 180  # Literal: days between maintenance
        metadata:
          unit_of_measurement: ""

      # Literal attributes - inverter specifications
      rated_power: 5000
      efficiency_rating: 0.95
      operating_voltage: 400
      max_temp: 85
      serial_number: "SI-2024-001"
      warranty_months: 120
      grid_compliant: True
    metadata:
      unit_of_measurement: "W"
      device_class: "power"
      state_class: "measurement"